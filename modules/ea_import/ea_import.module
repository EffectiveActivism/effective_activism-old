<?php

/**
 * @file
 * Contains ea_import.module.
 */

use Drupal\ea_import\CSVFileException;
use Drupal\ea_events\Entity\Event;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\file\Entity\File;

const EA_IMPORT_BUNDLE_CSV = 'csv';
const EA_IMPORT_BUNDLE_ICALENDAR = 'icalendar';

/**
 * Implements hook_help().
 */
function ea_import_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ea_import module.
    case 'help.page.ea_import':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Import content from 3rd party sources.') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_theme().
 */
function ea_import_theme() {
  $theme = [];
  $theme['import'] = array(
    'render element' => 'elements',
    'file' => 'import.page.inc',
    'template' => 'import',
  );
  $theme['import_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'import.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function ea_import_theme_suggestions_import(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#import'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'import__' . $sanitized_view_mode;
  $suggestions[] = 'import__' . $entity->bundle();
  $suggestions[] = 'import__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'import__' . $entity->id();
  $suggestions[] = 'import__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_presave().
 */
function ea_import_entity_presave(EntityInterface $entity) {
  // If the import is a CSV file, import the content of it.
  if ($entity->bundle() === EA_IMPORT_BUNDLE_CSV) {
    $field_file_csv = $entity->get('field_file_csv')->getValue();
    if (!empty($field_file_csv[0]['target_id'])) {
      // Load file entity.
      $csv_file = File::load($field_file_csv[0]['target_id']);
      if ($csv_file) {
        // Iterate file.
        $row = 0;
        if (($handle = fopen($csv_file->getFileUri(), "r")) !== FALSE) {
          $error_count = 0;
          while (($data = fgetcsv($handle)) !== FALSE) {
            $row++;
            // Validate headers.
            if ($row === 1) {
              if (
                count($data) !== 7 ||
                $data[0] !== 'title' ||
                $data[1] !== 'description' ||
                $data[2] !== 'date_start' ||
                $data[3] !== 'date_end' ||
                $data[4] !== 'location' ||
                $data[5] !== 'location_title' ||
                $data[6] !== 'grouping'
              ) {
                drupal_set_message('count: ' . count($data));
                fclose($handle);
                throw new Exception(t('CSV header not formatted properly'));
              }
              continue;
            }
            // Attempt to create event.
            $event = Event::create(array(
              'title' => $data[0],
              'description' => $data[1],
              'start_date' => date(DATETIME_DATETIME_STORAGE_FORMAT, (int) $data[2]),
              'end_date' => date(DATETIME_DATETIME_STORAGE_FORMAT, (int) $data[3]),
              'location' => $data[4],
              'grouping' => $data[6],
              'user_id' => Drupal::currentUser()->id(),
            ));
            $errors = $event->validate();
            if ($errors->count() > 0) {
              $error_list = [];
              foreach ($errors as $error) {
                $error_list[] = $error->getMessage();
              }
              fclose($handle);
              throw new Exception(t('Errors found in row @row: @errors', array('@row' => $row, '@errors' => implode('</br>', $error_list))));
            }
          }
          fclose($handle);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ea_import_import_insert(EntityInterface $entity) {
  // If the import is a CSV file, import the content of it.
  if ($entity->bundle() === EA_IMPORT_BUNDLE_CSV) {
    $field_file_csv = $entity->get('field_file_csv')->getValue();
    if (!empty($field_file_csv[0]['target_id'])) {
      // Load file entity.
      $csv_file = File::load($field_file_csv[0]['target_id']);
      if ($csv_file) {
        // Iterate file.
        $row = 0;
        if (($handle = fopen($csv_file->getFileUri(), "r")) !== FALSE) {
          while (($data = fgetcsv($handle)) !== FALSE) {
            $row++;
            // Skip headers.
            if ($row === 1) {
              continue;
            }
            $event = Event::create(array(
              'title' => $data[0],
              'description' => $data[1],
              'start_date' => date(DATETIME_DATETIME_STORAGE_FORMAT, $data[2]),
              'end_date' => date(DATETIME_DATETIME_STORAGE_FORMAT, $data[3]),
              'location' => $data[4],
              'grouping' => $data[6],
              'user_id' => Drupal::currentUser()->id(),
            ));
            $event->save();
          }
          fclose($handle);
        }
        if ($row > 2) {
          drupal_set_message(t('@count events imported', array('@count' => $row)));
        } elseif ($row === 2) {
          drupal_set_message(t('One event imported'));
        }
        else {
          drupal_set_message(t('No events imported'), 'warning');
        }
      }
    }
  }
  // If the import is an ICalendar file, import the content of it.
  if ($entity->bundle() === EA_IMPORT_BUNDLE_ICALENDAR) {
    drupal_set_message('ICalendar file added');
  }
}
