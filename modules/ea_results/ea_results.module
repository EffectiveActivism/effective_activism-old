<?php

/**
 * @file
 * Contains ea_results.module.
 */

use Drupal\ea_results\Entity\ResultType;
use Drupal\ea_data\Entity\DataType;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function ea_results_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ea_results module.
    case 'help.page.ea_results':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      return $output;

    default:
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function ea_results_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  if ($entity_form['#entity_type'] === 'result') {
    // Hide revision and user fields.
    $entity_form['user_id']['#attributes']['class'][] = 'hidden';
    $entity_form['revision_log_message']['#attributes']['class'][] = 'hidden';
  }
}

/**
 * Add a taxonomy field.
 *
 * @param ResultType $result_type
 *   The result type to add field to.
 */
function _ea_result_add_taxonomy_field(ResultType $result_type) {
  $entity_type_id = 'result';
  $bundle_id = $result_type->id();
  // Create unique field name.
  $gid = $result_type->organization;
  $field_name = sprintf('field_tags_%d', $gid);
  $vid = sprintf('tags_%d', $gid);
  // Check if field exists and create as necessary.
  $field_storage = FieldStorageConfig::loadByName($entity_type_id, $field_name);
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create(array(
      'field_name' => $field_name,
      'entity_type' => $entity_type_id,
      'type' => 'entity_reference',
      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
      'module' => 'core',
      'settings' => ['target_type' => 'taxonomy_term'],
    ))->save();
  }
  // Check if instance exists and create as necessary.
  $field = FieldConfig::loadByName($entity_type_id, $bundle_id, $field_name);
  if (empty($field)) {
    // Create field.
    $field = FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type_id,
      'bundle' => $bundle_id,
      'label' => t('Tags'),
    ]);
    $field->setRequired(TRUE)
      ->setSetting('target_type', 'taxonomy_term')
      ->setSetting('handler', 'default')
      ->setSetting('handler_settings', [
        'target_bundles' => [
          $vid => $vid,
        ],
      ])
      ->save();
  }
  // Set form display settings.
  entity_get_form_display($entity_type_id, $bundle_id, 'default')
    ->setComponent($field_name, [
      'type' => 'entity_reference_autocomplete_tags',
    ])
    ->save();
  // Set view display settings.
  entity_get_display($entity_type_id, $bundle_id, 'default')
    ->setComponent($field_name, [
      'type' => 'entity_reference_entity_view',
    ])
    ->save();
}

/**
 * Keep result type fields updated.
 *
 * @param ResultType $result_type
 *   The result type to update.
 */
function _ea_result_update_bundle_settings(ResultType $result_type) {
  $entity_type_id = 'result';
  $bundle_id = $result_type->id();
  $enabled_fields = [];
  if (isset($result_type->datatypes) && !empty($result_type->datatypes)) {
    foreach ($result_type->datatypes as $data_type => $enabled) {
      if ((bool) $enabled) {
        $field_name = 'field_' . $data_type;
        // Check if field exists and create as necessary.
        $field_storage = FieldStorageConfig::loadByName($entity_type_id, $field_name);
        if (empty($field_storage)) {
          $field_storage = FieldStorageConfig::create(array(
            'field_name' => $field_name,
            'entity_type' => $entity_type_id,
            'type' => 'entity_reference',
            'cardinality' => 1,
            'module' => 'core',
            'settings' => array('target_type' => 'data'),
          ))->save();
        }
        // Check if instance exists and create as necessary.
        $field = FieldConfig::loadByName($entity_type_id, $bundle_id, $field_name);
        if (empty($field)) {
          // Get label of DataType entity.
          $data_type_entity = DataType::load($data_type);
          $label = $data_type_entity->label();
          // Create field.
          $field = FieldConfig::create(array(
            'field_name' => $field_name,
            'entity_type' => $entity_type_id,
            'bundle' => $bundle_id,
            'label' => $label,
          ));
          $field->setRequired(TRUE)
            ->setSetting('target_type', 'data')
            ->setSetting('handler', 'default')
            ->setSetting('handler_settings', array(
              'target_bundles' => array(
                $data_type => $data_type,
              ),
            ))->save();
        }
        // Unhide any fields that already exists.
        _ea_results_enable_field_display($field);
        // Add to enabled fields.
        $enabled_fields[] = $field_name;
      }
    }
  }
  // Hide any fields that arent enabled.
  foreach (\Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle_id) as $field_name => $field_definition) {
    if (strpos($field_name, 'field_') === 0 && !in_array($field_name, $enabled_fields)) {
      $field = FieldConfig::loadByName($entity_type_id, $bundle_id, $field_name);
      $field->setRequired(FALSE)->save();
      _ea_results_disable_field_display($field);
    }
  }
}

/**
 * Set field display to simple inline entity form and require field.
 *
 * @param FieldConfig $field
 *   The field to enable.
 */
function _ea_results_enable_field_display(FieldConfig $field) {
  // Set form display settings.
  entity_get_form_display($field->getTargetEntityTypeId(), $field->getTargetBundle(), 'default')
    ->setComponent($field->getName(), array(
      'type' => 'inline_entity_form_simple',
    ))
    ->save();
  // Set view display settings.
  entity_get_display($field->getTargetEntityTypeId(), $field->getTargetBundle(), 'default')
    ->setComponent($field->getName(), array(
      'type' => 'entity_reference_entity_view',
    ))
    ->save();
}

/**
 * Set field display to hidden and do not require field.
 *
 * @param FieldConfig $field
 *   The field to disable.
 */
function _ea_results_disable_field_display(FieldConfig $field) {
  // Set form display settings.
  entity_get_form_display($field->getTargetEntityTypeId(), $field->getTargetBundle(), 'default')
    ->removeComponent($field->getName())
    ->save();
  // Set view display settings.
  entity_get_display($field->getTargetEntityTypeId(), $field->getTargetBundle(), 'default')
    ->removeComponent($field->getName())
    ->save();
}
