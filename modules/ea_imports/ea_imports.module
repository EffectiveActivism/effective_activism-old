<?php

/**
 * @file
 * Contains ea_imports.module.
 */

use Drupal\ea_imports\Parser\CSVParser;
use Drupal\ea_imports\Parser\ICalendarParser;
use Drupal\ea_imports\Parser\RruleParser;
use Drupal\ea_events\Entity\Event;
use Drupal\ea_events\Entity\EventRepeater;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

const EA_IMPORTS_BUNDLE_CSV = 'csv';
const EA_IMPORTS_BUNDLE_ICALENDAR = 'icalendar';
const EA_IMPORTS_MAX_ERRORS = 15;

/**
 * Implements hook_help().
 */
function ea_imports_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ea_imports module.
    case 'help.page.ea_imports':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Import content from 3rd party sources.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_theme().
 */
function ea_imports_theme() {
  $theme = [];
  $theme['import'] = array(
    'render element' => 'elements',
    'file' => 'import.page.inc',
    'template' => 'import',
  );
  $theme['import_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'import.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ea_imports_theme_suggestions_import(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#import'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'import__' . $sanitized_view_mode;
  $suggestions[] = 'import__' . $entity->bundle();
  $suggestions[] = 'import__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'import__' . $entity->id();
  $suggestions[] = 'import__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_presave().
 */
function ea_imports_entity_presave(EntityInterface $entity) {
  // If the import is an ICalendar file, validate the content of it.
  if ($entity->bundle() === EA_IMPORTS_BUNDLE_ICALENDAR) {
    $field_url = $entity->get('field_url')->getValue();
    $grouping = $entity->get('grouping')->getValue();
    $filter_title = $entity->get('field_filter_title')->getValue();
    $filter_description = $entity->get('field_filter_title')->getValue();
    $filter_date_start = $entity->get('field_filter_date_start')->getValue();
    $filter_date_end = $entity->get('field_filter_date_end')->getValue();
    $gid = $grouping[0]['target_id'];
    // Validate filter fields.
    if (
      !empty($filter_date_start[0]['value']) &&
      !empty($filter_date_end[0]['value']) &&
      $filter_date_start[0]['value'] > $filter_date_end[0]['value']
    ) {
      throw new Exception(t('The start date must be before the end date.'));
    }
    // Add filters.
    $filters = [];
    $filters['title'] = !empty($filter_title[0]['value']) ? $filter_title[0]['value'] : NULL;
    $filters['description'] = !empty($filter_description[0]['value']) ? $filter_description[0]['value'] : NULL;
    $filters['date_start'] = !empty($filter_date_start[0]['value']) ? $filter_date_start[0]['value'] : NULL;
    $filters['date_end'] = !empty($filter_date_end[0]['value']) ? $filter_date_end[0]['value'] : NULL;
    // Get ICalendar file.
    $parsed_icalendar = new ICalendarParser($field_url[0]['uri'], $filters);
    // Validate ICalendar headers.
    if (!$parsed_icalendar->validateHeaders()) {
      throw new Exception(t('The ICalendar header not formatted properly.'));
    }
    // Iterate events.
    $count = 0;
    foreach ($parsed_icalendar->getEvents() as $parsed_event) {
      $count++;
      // Get UID.
      $uid = $parsed_event['uid'];
      unset($parsed_event['uid']);
      // Get RRULE.
      $rrule = $parsed_event['rrule'];
      unset($parsed_event['rrule']);
      // Validate RRULE.
      if (!empty($rrule)) {
        $rruleParser = new RruleParser($rrule);
        $event_repeater = EventRepeater::create($rruleParser->getEventRepeaterValues());
        // Raise error on validation failure.
        $event_repeater_errors = $event_repeater->validate();
        if ($event_repeater_errors->count() > 0) {
          $event_repeater_error_list = [];
          foreach ($event_repeater_errors as $error) {
            $event_repeater_error_list[] = strip_tags($error->getMessage());
          }
          throw new Exception(t('Errors found in row @row: The RRULE is not formatted properly. @errors', array(
            '@row' => $count,
            '@errors' => implode(', ', $event_repeater_error_list),
          )));
        }
      }
      // Create event.
      $parsed_event['grouping'] = $gid;
      $parsed_event['user_id'] = \Drupal::currentUser()->id();
      $event = Event::create($parsed_event);
      // Raise error on validation failure.
      $errors = $event->validate();
      if ($errors->count() > 0) {
        $error_list = [];
        $error_count = 0;
        foreach ($errors as $error) {
          $error_message = strip_tags($error->getMessage());
          // Skip missing EventRepeater entity error.
          if ($error_message !== (string) t('This value should not be null.')) {
            $error_list[] = $error_message;
            $error_count++;
          }
          if ($error_count > EA_IMPORTS_MAX_ERRORS) {
            break;
          }
        }
        if ($error_count > 0) {
          throw new Exception(t('Errors found in row @row: @errors', array(
            '@row' => $count,
            '@errors' => implode(', ', $error_list),
          )));
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ea_imports_import_insert(EntityInterface $entity) {
  // If the import is a CSV file, import the content of it.
  if ($entity->bundle() === EA_IMPORTS_BUNDLE_CSV) {
    $field_file_csv = $entity->get('field_file_csv')->getValue();
    $grouping = $entity->get('grouping')->getValue();
    $gid = $grouping[0]['target_id'];
    // Get CSV file.
    $parsed_csv = new CSVParser($field_file_csv[0]['target_id'], $gid);
    $parsed_csv->import();
  }
  // If the import is an ICalendar file, import the content of it.
  elseif ($entity->bundle() === EA_IMPORTS_BUNDLE_ICALENDAR) {
    $field_url = $entity->get('field_url')->getValue();
    $grouping = $entity->get('grouping')->getValue();
    $filter_title = $entity->get('field_filter_title')->getValue();
    $filter_description = $entity->get('field_filter_title')->getValue();
    $filter_date_start = $entity->get('field_filter_date_start')->getValue();
    $filter_date_end = $entity->get('field_filter_date_end')->getValue();
    $gid = $grouping[0]['target_id'];
    // Add filters.
    $filters = [];
    $filters['title'] = !empty($filter_title[0]['value']) ? $filter_title[0]['value'] : NULL;
    $filters['description'] = !empty($filter_description[0]['value']) ? $filter_description[0]['value'] : NULL;
    $filters['date_start'] = !empty($filter_date_start[0]['value']) ? $filter_date_start[0]['value'] : NULL;
    $filters['date_end'] = !empty($filter_date_end[0]['value']) ? $filter_date_end[0]['value'] : NULL;
    // Get ICalendar file.
    $parsed_icalendar = new ICalendarParser($field_url[0]['uri'], $filters);
    // Iterate events.
    $count = 0;
    $duplicate_count = 0;
    foreach ($parsed_icalendar->getEvents() as $parsed_event) {
      // Get UID.
      $uid = $parsed_event['uid'];
      unset($parsed_event['uid']);
      // Get RRULE.
      $rrule = $parsed_event['rrule'];
      unset($parsed_event['rrule']);
      // Save event if UID is not found within grouping scope.
      if (!_ea_imports_uid_exists($gid, $uid)) {
        $count++;
        // If RRULE exists, create event repeater entity.
        if (!empty($rrule)) {
          $rruleParser = new RruleParser($rrule);
          $event_repeater = EventRepeater::create($rruleParser->getEventRepeaterValues());
          $event_repeater->save();
          $parsed_event['event_repeater'] = $event_repeater->id();
        }
        // Create event.
        $parsed_event['grouping'] = $gid;
        $parsed_event['user_id'] = \Drupal::currentUser()->id();
        $event = Event::create($parsed_event);
        $event->save();
        // Add event to import entity reference field.
        $entity->events->appendItem($event->id());
        $entity->save();
        // Insert UID/gid pair.
        _ea_imports_uid_insert($uid, $gid, $event->id());
      }
      else {
        $duplicate_count++;
      }
    }
    if ($count > 1) {
      drupal_set_message(t('@count events imported', array('@count' => $count)));
    }
    elseif ($count === 1) {
      drupal_set_message(t('One event imported'));
    }
    else {
      drupal_set_message(t('No events imported'), 'warning');
    }
    if ($duplicate_count > 1) {
      drupal_set_message(t('@count duplicate events skipped', array('@count' => $duplicate_count)), 'warning');
    }
    elseif ($duplicate_count === 1) {
      drupal_set_message(t('One duplicate event skipped'));
    }
  }
}

/**
 * Implements hook_cron().
 */
function ea_imports_cron() {
  // Get import configuration.
  $cron_config = \Drupal::config('ea_imports.settings');
  if ($cron_config->get('enabled')) {
    $interval = $cron_config->get('interval');
    $interval = !empty($interval) ? $interval : 3600;
    $nextExecution = \Drupal::state()->get('ea_imports.next_execution');
    $nextExecution = !empty($nextExecution) ? $nextExecution : 0;
    $nextExecution += $interval;
    if (REQUEST_TIME >= $nextExecution) {
      $count = 0;
      $duplicate_count = 0;
      // Reset counter.
      \Drupal::state()->set('ea_imports.next_execution', REQUEST_TIME);
      // Get ICalendar import entities.
      $iids = \Drupal::entityQuery('import')
        ->condition('type', 'icalendar')
        ->condition('field_continuous_import', '1')
        ->execute();
      $imports = \Drupal::entityManager()->getStorage('import')->loadMultiple($iids);
      foreach ($imports as $import) {
        $field_url = $import->get('field_url')->getValue();
        $grouping = $import->get('grouping')->getValue();
        $filter_title = $import->get('field_filter_title')->getValue();
        $filter_description = $import->get('field_filter_title')->getValue();
        $filter_date_start = $import->get('field_filter_date_start')->getValue();
        $filter_date_end = $import->get('field_filter_date_end')->getValue();
        $gid = $grouping[0]['target_id'];
        // Add filters.
        $filters = [];
        $filters['title'] = !empty($filter_title[0]['value']) ? $filter_title[0]['value'] : NULL;
        $filters['description'] = !empty($filter_description[0]['value']) ? $filter_description[0]['value'] : NULL;
        $filters['date_start'] = !empty($filter_date_start[0]['value']) ? $filter_date_start[0]['value'] : NULL;
        $filters['date_end'] = !empty($filter_date_end[0]['value']) ? $filter_date_end[0]['value'] : NULL;
        // Get ICalendar file.
        $parsed_icalendar = new ICalendarParser($field_url[0]['uri'], $filters);
        // Iterate events.
        foreach ($parsed_icalendar->getEvents() as $parsed_event) {
          // Get UID.
          $uid = $parsed_event['uid'];
          unset($parsed_event['uid']);
          // Get RRULE.
          $rrule = $parsed_event['rrule'];
          unset($parsed_event['rrule']);
          // Save event if UID is not found within grouping scope.
          // This does not take changes to an existing event into account.
          if (!_ea_imports_uid_exists($gid, $uid)) {
            // If RRULE exists, create event repeater entity.
            if (!empty($rrule)) {
              $event_repeater = EventRepeater::createFromRRule($rrule);
              $event_repeater->save();
              $parsed_event['event_repeater'] = $event_repeater->id();
            }
            // Create event.
            $parsed_event['grouping'] = $gid;
            $parsed_event['user_id'] = \Drupal::currentUser()->id();
            $event = Event::create($parsed_event);
            $event->save();
            // Add event to import entity reference field.
            $import->events->appendItem($event->id());
            $import->save();
            // Insert UID/gid pair.
            _ea_imports_uid_insert($uid, $gid, $event->id());
            // Increment event import count.
            $count++;
          }
          else {
            $duplicate_count++;
          }
        }
      }
      \Drupal::logger('ea_imports')->notice(t('Cron: @count events imported', array('@count' => $count)));
      \Drupal::logger('ea_imports')->notice(t('Cron: @count duplicate events skipped', array('@count' => $duplicate_count)));
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Disallow changes to the source file of existing import entities.
 */
function ea_imports_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'import_csv_add_form') {
    $form['#validate'][] = '_ea_imports_validate_csv';
  }
  elseif ($form_id === 'import_icalendar_edit_form') {
    $form['field_url']['#access'] = 0;
  }
}

/**
 * Validation function for the CSV import form.
 * 
 * @param array $form
 *   The form array.
 * @param FormStateInterface $form_state
 *   The form state to validate.
 */
function _ea_imports_validate_csv(&$form, FormStateInterface $form_state) {
  $trigger = $form_state->getTriggeringElement();
  // Do not validate on file upload button trigger.
  if (!empty($trigger['#name']) && $trigger['#name'] !== 'field_file_csv_0_upload_button' && $trigger['#name'] !== 'field_file_csv_0_remove_button') {
    if (!empty($form_state->getValue('field_file_csv')[0]['fids'][0])) {
      $fid = $form_state->getValue('field_file_csv')[0]['fids'][0];
      $gid = $form_state->getValue('grouping')[0]['target_id'];
      $parsed_csv = new CSVParser($fid, $gid);
      if (!$parsed_csv->validate()) {
        $form_state->setErrorByName('field_file_csv', $parsed_csv->getErrorMessage());
      }
    }
  }
}

/**
 * Check for matching gid/uid pair.
 *
 * @param int $gid
 *   The grouping id.
 * @param string $uid
 *   The unique id.
 *
 * @return bool
 *   Returns TRUE if gid/uid match found.
 */
function _ea_imports_uid_exists($gid, $uid) {
  $count = NULL;
  try {
    $count = (boolean) db_select('ea_imports_uids', 'id')
      ->fields('id')
      ->condition('gid', $gid)
      ->condition('uid', $uid)
      ->countQuery()
      ->execute()
      ->fetchField();
  }
  catch (Exception $exception) {
    \Drupal::logger('ea_imports')->notice(t('Database operation failed. Message = %message', array(
      '%message' => $exception->getMessage(),
    )));
  }
  return $count;
}

/**
 * Insert gid/uid pair.
 *
 * @param string $uid
 *   The unique id.
 * @param int $gid
 *   The grouping id.
 * @param int $eid
 *   The event id.
 */
function _ea_imports_uid_insert($uid, $gid, $eid) {
  try {
    $result = db_insert('ea_imports_uids')
      ->fields(array(
        'uid' => $uid,
        'gid' => $gid,
        'eid' => $eid,
      ))
      ->execute();
  }
  catch (Exception $exception) {
    \Drupal::logger('ea_imports')->notice(t('Database operation failed. Message = %message', array(
      '%message' => $exception->getMessage(),
    )));
  }
}
